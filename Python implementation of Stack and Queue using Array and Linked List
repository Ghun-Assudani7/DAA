Stack Implementation:
Using Array:
python
Copy code
class StackArray:
    def __init__(self):
        self.stack = []

    def is_empty(self):
        return len(self.stack) == 0

    def push(self, item):
        self.stack.append(item)

    def pop(self):
        if not self.is_empty():
            return self.stack.pop()
        else:
            return "Stack is empty"

    def peek(self):
        if not self.is_empty():
            return self.stack[-1]
        else:
            return "Stack is empty"

    def size(self):
        return len(self.stack)


# Example Usage:
stack_array = StackArray()
stack_array.push(1)
stack_array.push(2)
stack_array.push(3)

print("Stack (Array) Peek:", stack_array.peek())
print("Stack (Array) Pop:", stack_array.pop())
print("Stack (Array) Size:", stack_array.size())
Using Linked List:
python
Copy code
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class StackLinkedList:
    def __init__(self):
        self.top = None

    def is_empty(self):
        return self.top is None

    def push(self, item):
        new_node = Node(item)
        new_node.next = self.top
        self.top = new_node

    def pop(self):
        if not self.is_empty():
            popped_item = self.top.data
            self.top = self.top.next
            return popped_item
        else:
            return "Stack is empty"

    def peek(self):
        if not self.is_empty():
            return self.top.data
        else:
            return "Stack is empty"

    def size(self):
        count = 0
        current = self.top
        while current:
            count += 1
            current = current.next
        return count


# Example Usage:
stack_linked_list = StackLinkedList()
stack_linked_list.push(1)
stack_linked_list.push(2)
stack_linked_list.push(3)

print("Stack (Linked List) Peek:", stack_linked_list.peek())
print("Stack (Linked List) Pop:", stack_linked_list.pop())
print("Stack (Linked List) Size:", stack_linked_list.size())
Queue Implementation:
Using Array:
python
Copy code
class QueueArray:
    def __init__(self):
        self.queue = []

    def is_empty(self):
        return len(self.queue) == 0

    def enqueue(self, item):
        self.queue.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.queue.pop(0)
        else:
            return "Queue is empty"

    def front(self):
        if not self.is_empty():
            return self.queue[0]
        else:
            return "Queue is empty"

    def size(self):
        return len(self.queue)


# Example Usage:
queue_array = QueueArray()
queue_array.enqueue(1)
queue_array.enqueue(2)
queue_array.enqueue(3)

print("Queue (Array) Front:", queue_array.front())
print("Queue (Array) Dequeue:", queue_array.dequeue())
print("Queue (Array) Size:", queue_array.size())
Using Linked List:
python
Copy code
class QueueNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class QueueLinkedList:
    def __init__(self):
        self.front = None
        self.rear = None

    def is_empty(self):
        return self.front is None

    def enqueue(self, item):
        new_node = QueueNode(item)
        if self.is_empty():
            self.front = self.rear = new_node
        else:
            self.rear.next = new_node
            self.rear = new_node

    def dequeue(self):
        if not self.is_empty():
            dequeued_item = self.front.data
            self.front = self.front.next
            if self.front is None:
                self.rear = None
            return dequeued_item
        else:
            return "Queue is empty"

    def front(self):
        if not self.is_empty():
            return self.front.data
        else:
            return "Queue is empty"

    def size(self):
        count = 0
        current = self.front
        while current:
            count += 1
            current = current.next
        return count


# Example Usage:
queue_linked_list = QueueLinkedList()
queue_linked_list.enqueue(1)
queue_linked_list.enqueue(2)
queue_linked_list.enqueue(3)

print("Queue (Linked List) Front:", queue_linked_list.front())
print("Queue (Linked List) Dequeue:", queue_linked_list.dequeue())
print("Queue (Linked List) Size:", queue_linked_list.size())
